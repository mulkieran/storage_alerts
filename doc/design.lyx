#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Storage Alerts Journal API
\end_layout

\begin_layout Author
Anne Mulhern
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Section
Entries
\end_layout

\begin_layout Subsection
Background
\end_layout

\begin_layout Standard
Systemd provides a MESSAGE_ID field which can be used to identify categories
 of messages and specifies how MESSAGE_IDS, which have the standard UUID
 format,are generated.
 MESSAGE_ID values can be linked to message catalog entries.
 These message catalog entries may provide further information about the
 particular error.
 Catalog entries are essentially templates, which can be parameterized on
 keys associated with the MESSAGE_ID, i.e., every catalog entry is a function
 from a set of string values to a string message.
 Currently, it seems that this functionality is very little used, except
 by systemd itself, but it is fully implemented, down to rpm directives
 for properly installing catalog entry files.
 Essentially, the result of applying a catalog entry to a set of fields
 yields a human readable message, like the usual free form message added
 to syslog.
 This is obviously the better direction; rather than extracting fields from
 a human-readable message by means of a regular expression, the essential
 fields exist and are combined with a template to yield a human-readable
 message.
\end_layout

\begin_layout Subsection
Proposal
\end_layout

\begin_layout Subsubsection
Log Entries
\end_layout

\begin_layout Enumerate
Every journal entry that the framework consumes 
\emph on
must
\emph default
 include a MESSAGE_ID.
 All other entries will be ignored by the framework.
 
\end_layout

\begin_layout Enumerate
Somehow, what additional fields are provided along with the MESSAGE_ID should
 be specified by the application.
 It is likely that the best way to do this is by means of either the catalog
 file itself or an api file that is handled similarly by systemd.
 An alternative is to supply this API by means of some application specific
 file, but that way seems less valuable.
 If part of systemd, then journalctl and the underlying APIs can be used
 to supply the information in a human- and program-friendly way.
\end_layout

\begin_layout Enumerate
Each MESSAGE_ID 
\emph on
should
\emph default
 have an associated catalog entry.
 If the catalog format is extended to include API information as in (2),
 then this part is mandatory, to ensure that the catalog file is valid.
\end_layout

\begin_layout Enumerate
Somehow, the special keys supplied with the MESSAGE_ID should be secured
 against conflicts from systemd keys.
 Since all keys occupy the same namespace, this problem could be solved
 by prefixing each key with the MESSAGE_ID value or by some other means.
 If this seems too much trouble, then they can be left unsecured, but this
 could result in journald 
\begin_inset Quotes eld
\end_inset

stealing
\begin_inset Quotes erd
\end_inset

 an application defined key.
\end_layout

\begin_layout Enumerate
It is essential that the log entry supply sufficient information to unambiguousl
y identify the devices involved.
 In some cases, it is likely that more than one device will need to be specified.
 For example, an mdadm log entry might specify a RAID member and also a
 RAID array, while a multipath log entry might specify a path and an actual
 device.
 It is desirable that systemd synthesize additional information about the
 device from the key values.
\end_layout

\begin_layout Subsubsection
Provider Responsibilities
\end_layout

\begin_layout Itemize
Each provider of journal entries should provide, for each message category,
 a verifier procedure which can consume log entry fields to verify if the
 situation described by the log entry holds.
 The log entry fields should be sufficient information for the verifier
 procedure to determine whether the situation holds or not.
\end_layout

\begin_layout Itemize
Each provider should supply a list of MESSAGE_IDs that it may publish as
 well as the key/value pairs that it promises to provide for each MESSAGE_ID.
 The best way to do this is probably by installation to systemd-associated
 directories, similarly to the way catalog files are installed.
 The main drawback of supplying this information by means of installed files,
 is that it is not programmatically available without installation.
\end_layout

\begin_layout Subsubsection
Framework Responsibilites
\end_layout

\begin_layout Itemize
The framework should provide a uniform interface to provider supplied verifiers.
\end_layout

\begin_layout Itemize
The framework itself should not hold any state or any sort of model of the
 current storage state.
\end_layout

\begin_layout Itemize
The framework must make a best effort to examine all entries in the journal,
 either implicitly or explicitly.
 That is, it should not regularly ignore sequences of log entries for performanc
e reasons, but only because they are irrelevant.
\end_layout

\begin_layout Itemize
The framework must communicate at least the information about the event
 that is in the log entry.
 It may supplement this information with additional fields, which should
 be clearly marked as derived.
 It may not override any of the fields originally derived from the log entry
 itself.
\end_layout

\begin_layout Subsubsection
Systemd Responsibilities
\end_layout

\begin_layout Itemize
Systemd should synthesize additional device information from device information
 supplied by the log entry.
 Currently systemd synthesizes information if the kernel supplies a DEVICE
 field.
 This becomes _KERNEL_DEVICE in the log entry, and journald figures out
 for itself the values of _UDEV_SYSNAME, _UDEV_DEVNODE, and _UDEV_DEVLINK
 if available.
 It will need to have a uniform naming scheme, since the provider may refer
 to multiple devices.
\end_layout

\begin_layout Subsubsection
Consumer Requirements
\end_layout

\begin_layout Itemize
The information supplied should be sufficient to allow the consumer to understan
d and remediate the problem.
\end_layout

\end_body
\end_document
