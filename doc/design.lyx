#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Storage Alerts Journal API Proposal
\end_layout

\begin_layout Author
Anne Mulhern
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Standard
Systemd provides a MESSAGE_ID field which can be used to identify categories
 of messages and specifies how MESSAGE_IDS, which have the standard UUID
 format,are generated.
 MESSAGE_ID values can be linked to message catalog entries.
 These message catalog entries may provide further information about the
 particular error.
 Catalog entries are essentially templates, which can be parameterized on
 keys associated with the MESSAGE_ID, i.e., every catalog entry is a function
 from a set of string values to a string message.
 Currently, it seems that this functionality is very little used, except
 by systemd itself, but it is fully implemented, down to rpm directives
 for properly installing catalog entry files.
 Essentially, the result of applying a catalog entry to a set of fields
 yields a human readable message, like the usual free form message added
 to syslog.
 This is obviously the better direction; rather than extracting fields from
 a human-readable message by means of a regular expression, the essential
 fields exist and are combined with a template to yield a human-readable
 message.
\end_layout

\begin_layout Section
Proposal
\end_layout

\begin_layout Subsection
Log Entries
\end_layout

\begin_layout Enumerate
Every journal entry that the framework consumes 
\emph on
must
\emph default
 include a MESSAGE_ID.
 All other entries will be ignored by the framework.
 
\end_layout

\begin_layout Enumerate
Somehow, what additional fields are provided along with the MESSAGE_ID should
 be specified by the application.
 It is likely that the best way to do this is by means of either the catalog
 file itself or an api file that is handled similarly by systemd.
 An alternative is to supply this API by means of some application specific
 file, but that way seems less valuable.
 If part of systemd, then journalctl and the underlying APIs can be used
 to supply the information in a human- and program-friendly way.
\end_layout

\begin_layout Enumerate
Each MESSAGE_ID 
\emph on
should
\emph default
 have an associated catalog entry.
 If the catalog format is extended to include API information as in (2),
 then this part is mandatory, to ensure that the catalog file is valid.
\end_layout

\begin_layout Enumerate
Somehow, the special keys supplied with the MESSAGE_ID should be secured
 against conflicts from systemd keys.
 Since all keys occupy the same namespace, this problem could be solved
 by prefixing each key with the MESSAGE_ID value or by some other means.
 If this seems too much trouble, then they can be left unsecured, but this
 could result in journald 
\begin_inset Quotes eld
\end_inset

stealing
\begin_inset Quotes erd
\end_inset

 an application defined key.
\end_layout

\begin_layout Enumerate
It is essential that the log entry supply sufficient information to unambiguousl
y identify the devices involved.
 In some cases, it is likely that more than one device will need to be specified.
 For example, an mdadm log entry might specify a RAID member and also a
 RAID array, while a multipath log entry might specify a path and an actual
 device.
 It is desirable that systemd synthesize additional information about the
 device from the key values.
\end_layout

\begin_layout Subsection
Provider Responsibilities
\end_layout

\begin_layout Itemize
Each provider of journal entries should provide, for each message category,
 a verifier procedure which can consume log entry fields to verify if the
 situation described by the log entry holds.
 The log entry fields should be sufficient information for the verifier
 procedure to determine whether the situation holds or not.
\end_layout

\begin_layout Itemize
Each provider should supply a list of MESSAGE_IDs that it may publish as
 well as the key/value pairs that it promises to provide for each MESSAGE_ID.
 The best way to do this is probably by installation to systemd-associated
 directories, similarly to the way catalog files are installed.
 The main drawback of supplying this information by means of installed files,
 is that it is not programmatically available without installation.
\end_layout

\begin_layout Itemize
The provider must offer a guarantee that it will log certain events whenever
 they happen.
 For this reason, the events that it logs should at least initially be kept
 to a minimum of those considered most important for consumers.
\end_layout

\begin_layout Subsection
Framework Responsibilites
\end_layout

\begin_layout Itemize
The framework should provide a uniform interface to provider supplied verifiers.
\end_layout

\begin_layout Itemize
The framework itself should not hold any state or any sort of model of the
 current storage state.
\end_layout

\begin_layout Itemize
The framework must make a best effort to examine all entries in the journal,
 either implicitly or explicitly.
 That is, it should not regularly ignore sequences of log entries for performanc
e reasons, but only because they are irrelevant.
\end_layout

\begin_layout Itemize
The framework must communicate at least the information about the event
 that is in the log entry.
 It may supplement this information with additional fields, which should
 be clearly marked as derived.
 It may not override any of the fields originally derived from the log entry
 itself.
\end_layout

\begin_layout Itemize
The framework may synthesize additional information for consumers.
 For example, it could navigate the sysfs tree to discover other affected
 layers in the storage stack.
\end_layout

\begin_layout Subsection
Systemd Responsibilities
\end_layout

\begin_layout Itemize
Systemd might synthesize additional device information from device information
 supplied by the log entry.
 Currently systemd synthesizes information if the kernel supplies a DEVICE
 field.
 This becomes _KERNEL_DEVICE in the log entry, and journald figures out
 for itself the values of _UDEV_SYSNAME, _UDEV_DEVNODE, and _UDEV_DEVLINK
 if available.
 In the case of user-space process supplied information, this device information
 falls into the fakeable category, so should not be prepended with an underscore.
 In any case, systemd has made the choice to allow multiple key/value mapping,
 as may arise in the case of _UDEV_DEVLINK.
 There is no existing structure to distinguish one instance from another.
 In some cases, as with multipath paths, the ability to specify a particular
 path of several paths might be useful.
 However, any sort of indexing mechanism would have to be cobbled together
 to achieve this.
 
\end_layout

\begin_layout Subsection
Consumer Requirements
\end_layout

\begin_layout Itemize
The information supplied should be sufficient to allow the consumer to understan
d and remediate the problem.
\end_layout

\begin_layout Itemize
The information supplied should be sufficient to allow tracking events of
 interest as they occur over time in the journal.
 This would be useful to track trends or consistencies in behavior.
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Standard
The following are some examples to illustrate the proposal.
\end_layout

\begin_layout Standard
With all examples, it is necessary to intuit what consumers would find to
 be of interest.
\end_layout

\begin_layout Subsection
Multipath Path Failure
\end_layout

\begin_layout Standard
We know that it is always an important event when all paths to a device
 go down.
 Interestingly, mutipathd and multipath commands do not really show the
 failure of a map in any unambiguous way, showing instead the failure of
 individual paths.
\end_layout

\begin_layout Subsubsection
Alerting
\end_layout

\begin_layout Standard
Below is a sample catalog entry for this event.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

-- 6ad753f9616221d7769f698aa1ed526cfc95534b
\end_layout

\begin_layout Plain Layout

Subject: All paths for multipath device @MPATH_DEVICE@ are offline.
\end_layout

\begin_layout Plain Layout

Defined-By: multipathd
\end_layout

\begin_layout Plain Layout

Support: <appropriate link here>
\end_layout

\begin_layout Plain Layout

Documentation: <appropriate link here>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

All paths for multipath map @MPATH_MAP@ have gone offline.
\end_layout

\begin_layout Plain Layout

Consequently, device @MPATH_MAP_DMNODE@ is no longer usable.
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
We do not list the paths here in the catalog entry.
 Some keys, like MPATH_PATH_DEVICE may have multiple values associated with
 them.
 At this point, the way that substitution is done in the catalog entry is
 that an arbitrary value is selected.
 This would be misleading, so it is necessary to avoid using keys that may
 be bound to multiple values in the catalog entry.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And below is a sample specification for the key file.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

-- 6ad753f9616221d7769f698aa1ed526cfc95534b
\end_layout

\begin_layout Plain Layout

MPATH_MAP           # map of paths to device
\end_layout

\begin_layout Plain Layout

MPATH_MAP_DMNODE    # device mapper node corresponding to map -- derived
\end_layout

\begin_layout Plain Layout

MPATH_DEVICE_WWID   # wwid of underlying device -- derived
\end_layout

\begin_layout Plain Layout

MPATH_PATH_DEVICE   # kernel device name of path(s), followed by devnode
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The comments distinguish values that multipathd should 
\begin_inset Quotes eld
\end_inset

know
\begin_inset Quotes erd
\end_inset

, from those which are derived.
\end_layout

\begin_layout Standard
An actual journal entry would contain the following special key/value pairs,
 as well as the key/value pairs automatically inserted by journald.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
key
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MESSAGE_ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6ad753f9616221d7769f698aa1ed526cfc95534b
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MPATH_MAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WDC_WD10EFRX-68PJCN0_WD-WCC4JLHVDELY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MPATH_MAP_DMNODE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
/dev/dm-2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MPATH_DEVICE_WWID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
wwn-0x50014ee2603ef578
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MPATH_PATH_DEVICE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
b8:144,/dev/sdj,0:0:12:0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MPATH_PATH_DEVICE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
b8:160,/dev/sdk,0:0:14:0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
MESSAGE_ID identifies the log entry category
\end_layout

\begin_layout Itemize
MPATH_MAP is the globally unique map name 
\end_layout

\begin_layout Itemize
MPATH_MAP_DMNODE is the device mapper node corresponding to the map
\end_layout

\begin_layout Itemize
MPATH_DEVICE_WWID seems like a useful value, for tracking purposes
\end_layout

\begin_layout Itemize
the mpath map has several paths, all down, so the kernel device name, the
 devnode, and the host:channel:id:lun number is included for each path
\end_layout

\begin_layout Subsubsection
Verifying
\end_layout

\begin_layout Standard
The value of MPATH_MAP should be sufficient to allow a check of whether
 all the map's paths have actually failed to be implemented by multipath.
\end_layout

\begin_layout Subsubsection
Identifying Consequences
\end_layout

\begin_layout Standard
If all the paths have failed then the underlying device, including any partition
 on it, is innacessible.
 By the same token, the device can not be interrogated to find out its partition
s, and so forth.
 To identify the partitions on the device probably requires navigating the
 sysfs directories via the holders or slaves subdirectory, in the manner
 of blkid.
 One possible option is to traverse the holders sysfs directories and discover
 possible consequences for each discovered device in the hierarchy.
 This can be done passively, by simply synthesizing a possible problem from
 the structure of the tree, or actively, by interrogating the appropriate
 libraries and applications for corresponding devices.
 
\end_layout

\begin_layout Section
Technical Notes
\end_layout

\begin_layout Paragraph
Traversing Sysfs via slaves or holders
\end_layout

\begin_layout Standard
There do not seem to be any libraries around to do this.
 On the other hand, it is ultimately just a directory traversal, and therefore
 not so hard to implement.
 python-pyudev is a wrapper for libudev which can be readily extended to
 implement this traversal.
 
\end_layout

\end_body
\end_document
